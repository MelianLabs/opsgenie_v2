=begin
#OpsGenie REST API

#OpsGenie OpenAPI Specification

OpenAPI spec version: 2.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.1

=end

require 'spec_helper'
require 'json'

# Unit tests for OpsgenieClient::PolicyApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'PolicyApi' do
  before do
    # run before each test
    @instance = OpsgenieClient::PolicyApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of PolicyApi' do
    it 'should create an instance of PolicyApi' do
      expect(@instance).to be_instance_of(OpsgenieClient::PolicyApi)
    end
  end

  # unit tests for change_policy_order
  # Change Policy Order
  # Change execution order of the policy with given id
  # @param policy_id Id of the requested policy
  # @param body Change order payload
  # @param [Hash] opts the optional parameters
  # @option opts [String] :team_id TeamId of policy created if it belongs to a team
  # @return [SuccessResponse]
  describe 'change_policy_order test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_policy
  # Create Policy
  # Creates a new policy
  # @param body Payload of created policy
  # @param [Hash] opts the optional parameters
  # @option opts [String] :team_id TeamId of policy created if it belongs to a team
  # @return [CreatePolicyResponse]
  describe 'create_policy test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_policy
  # Delete Policy
  # Delete policy with given id
  # @param policy_id Id of the requested policy
  # @param [Hash] opts the optional parameters
  # @option opts [String] :team_id TeamId of policy created if it belongs to a team
  # @return [SuccessResponse]
  describe 'delete_policy test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for disable_policy
  # Disable Policy
  # Disable the policy with given id
  # @param policy_id Id of the requested policy
  # @param [Hash] opts the optional parameters
  # @option opts [String] :team_id TeamId of policy created if it belongs to a team
  # @return [SuccessResponse]
  describe 'disable_policy test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for enable_policy
  # Enable Policy
  # Enable the policy with given id
  # @param policy_id Id of the requested policy
  # @param [Hash] opts the optional parameters
  # @option opts [String] :team_id TeamId of policy created if it belongs to a team
  # @return [SuccessResponse]
  describe 'enable_policy test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_policy
  # Get Policy
  # Used to get details of a single policy with id
  # @param policy_id Id of the requested policy
  # @param [Hash] opts the optional parameters
  # @option opts [String] :team_id TeamId of policy created if it belongs to a team
  # @return [GetPolicyResponse]
  describe 'get_policy test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for list_alert_policies
  # List Alert Policies
  # Returns the list of alert policies
  # @param [Hash] opts the optional parameters
  # @option opts [String] :team_id TeamId of policy created if it belongs to a team
  # @return [ListPoliciesResponse]
  describe 'list_alert_policies test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for list_notification_policies
  # List Notification Policies
  # Returns the list of notification policies
  # @param [Hash] opts the optional parameters
  # @option opts [String] :team_id TeamId of policy created if it belongs to a team
  # @return [ListPoliciesResponse]
  describe 'list_notification_policies test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_policy
  # Update Policy
  # Update alert policy with given id
  # @param policy_id Id of the requested policy
  # @param body Payload of updated policy
  # @param [Hash] opts the optional parameters
  # @option opts [String] :team_id TeamId of policy created if it belongs to a team
  # @return [SuccessResponse]
  describe 'update_policy test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
