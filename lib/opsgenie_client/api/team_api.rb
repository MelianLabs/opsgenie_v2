=begin
#OpsGenie REST API

#OpsGenie OpenAPI Specification

OpenAPI spec version: 2.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.1

=end

require "uri"

module OpsgenieClient
  class TeamApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Create Team
    # Creates a new team
    # @param body Request payload of created team
    # @param [Hash] opts the optional parameters
    # @return [SuccessResponse]
    def create_team(body, opts = {})
      data, _status_code, _headers = create_team_with_http_info(body, opts)
      return data
    end

    # Create Team
    # Creates a new team
    # @param body Request payload of created team
    # @param [Hash] opts the optional parameters
    # @return [Array<(SuccessResponse, Fixnum, Hash)>] SuccessResponse data, response status code and response headers
    def create_team_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: TeamApi.create_team ..."
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling TeamApi.create_team"
      end
      # resource path
      local_var_path = "/v2/teams"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = ['GenieKey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SuccessResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TeamApi#create_team\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete Team
    # Delete team with given id or name
    # @param identifier Identifier of the team
    # @param [Hash] opts the optional parameters
    # @option opts [String] :identifier_type Type of the identifier. Possible values are &#39;id&#39; and &#39;name&#39;. Default value is &#39;id&#39; (default to id)
    # @return [SuccessResponse]
    def delete_team(identifier, opts = {})
      data, _status_code, _headers = delete_team_with_http_info(identifier, opts)
      return data
    end

    # Delete Team
    # Delete team with given id or name
    # @param identifier Identifier of the team
    # @param [Hash] opts the optional parameters
    # @option opts [String] :identifier_type Type of the identifier. Possible values are &#39;id&#39; and &#39;name&#39;. Default value is &#39;id&#39;
    # @return [Array<(SuccessResponse, Fixnum, Hash)>] SuccessResponse data, response status code and response headers
    def delete_team_with_http_info(identifier, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: TeamApi.delete_team ..."
      end
      # verify the required parameter 'identifier' is set
      if @api_client.config.client_side_validation && identifier.nil?
        fail ArgumentError, "Missing the required parameter 'identifier' when calling TeamApi.delete_team"
      end
      if @api_client.config.client_side_validation && opts[:'identifier_type'] && !['id', 'name'].include?(opts[:'identifier_type'])
        fail ArgumentError, 'invalid value for "identifier_type", must be one of id, name'
      end
      # resource path
      local_var_path = "/v2/teams/{identifier}".sub('{' + 'identifier' + '}', identifier.to_s)

      # query parameters
      query_params = {}
      query_params[:'identifierType'] = opts[:'identifier_type'] if !opts[:'identifier_type'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['GenieKey']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SuccessResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TeamApi#delete_team\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Team
    # Returns team with given 'id' or 'name'
    # @param identifier Identifier of the team
    # @param [Hash] opts the optional parameters
    # @option opts [String] :identifier_type Type of the identifier. Possible values are &#39;id&#39; and &#39;name&#39;. Default value is &#39;id&#39; (default to id)
    # @return [GetTeamResponse]
    def get_team(identifier, opts = {})
      data, _status_code, _headers = get_team_with_http_info(identifier, opts)
      return data
    end

    # Get Team
    # Returns team with given &#39;id&#39; or &#39;name&#39;
    # @param identifier Identifier of the team
    # @param [Hash] opts the optional parameters
    # @option opts [String] :identifier_type Type of the identifier. Possible values are &#39;id&#39; and &#39;name&#39;. Default value is &#39;id&#39;
    # @return [Array<(GetTeamResponse, Fixnum, Hash)>] GetTeamResponse data, response status code and response headers
    def get_team_with_http_info(identifier, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: TeamApi.get_team ..."
      end
      # verify the required parameter 'identifier' is set
      if @api_client.config.client_side_validation && identifier.nil?
        fail ArgumentError, "Missing the required parameter 'identifier' when calling TeamApi.get_team"
      end
      if @api_client.config.client_side_validation && opts[:'identifier_type'] && !['id', 'name'].include?(opts[:'identifier_type'])
        fail ArgumentError, 'invalid value for "identifier_type", must be one of id, name'
      end
      # resource path
      local_var_path = "/v2/teams/{identifier}".sub('{' + 'identifier' + '}', identifier.to_s)

      # query parameters
      query_params = {}
      query_params[:'identifierType'] = opts[:'identifier_type'] if !opts[:'identifier_type'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['GenieKey']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GetTeamResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TeamApi#get_team\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Team Logs
    # Return logs of a team given with identifier
    # @param identifier Identifier of the team
    # @param [Hash] opts the optional parameters
    # @option opts [String] :identifier_type Type of the identifier. Possible values are &#39;id&#39; and &#39;name&#39;. Default value is &#39;id&#39; (default to id)
    # @option opts [Integer] :limit Maximum number of items to provide in the result. Must be a positive integer value.
    # @option opts [String] :order Sorting order of the result set (default to desc)
    # @option opts [String] :offset Key which will be used in pagination
    # @return [ListTeamLogsResponse]
    def list_team_logs(identifier, opts = {})
      data, _status_code, _headers = list_team_logs_with_http_info(identifier, opts)
      return data
    end

    # List Team Logs
    # Return logs of a team given with identifier
    # @param identifier Identifier of the team
    # @param [Hash] opts the optional parameters
    # @option opts [String] :identifier_type Type of the identifier. Possible values are &#39;id&#39; and &#39;name&#39;. Default value is &#39;id&#39;
    # @option opts [Integer] :limit Maximum number of items to provide in the result. Must be a positive integer value.
    # @option opts [String] :order Sorting order of the result set
    # @option opts [String] :offset Key which will be used in pagination
    # @return [Array<(ListTeamLogsResponse, Fixnum, Hash)>] ListTeamLogsResponse data, response status code and response headers
    def list_team_logs_with_http_info(identifier, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: TeamApi.list_team_logs ..."
      end
      # verify the required parameter 'identifier' is set
      if @api_client.config.client_side_validation && identifier.nil?
        fail ArgumentError, "Missing the required parameter 'identifier' when calling TeamApi.list_team_logs"
      end
      if @api_client.config.client_side_validation && opts[:'identifier_type'] && !['id', 'name'].include?(opts[:'identifier_type'])
        fail ArgumentError, 'invalid value for "identifier_type", must be one of id, name'
      end
      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 100
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling TeamApi.list_team_logs, must be smaller than or equal to 100.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 1
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling TeamApi.list_team_logs, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && opts[:'order'] && !['asc', 'desc'].include?(opts[:'order'])
        fail ArgumentError, 'invalid value for "order", must be one of asc, desc'
      end
      # resource path
      local_var_path = "/v2/teams/{identifier}/logs".sub('{' + 'identifier' + '}', identifier.to_s)

      # query parameters
      query_params = {}
      query_params[:'identifierType'] = opts[:'identifier_type'] if !opts[:'identifier_type'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'order'] = opts[:'order'] if !opts[:'order'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['GenieKey']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ListTeamLogsResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TeamApi#list_team_logs\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Teams
    # Return list of teams
    # @param [Hash] opts the optional parameters
    # @return [ListTeamsResponse]
    def list_teams(opts = {})
      data, _status_code, _headers = list_teams_with_http_info(opts)
      return data
    end

    # List Teams
    # Return list of teams
    # @param [Hash] opts the optional parameters
    # @return [Array<(ListTeamsResponse, Fixnum, Hash)>] ListTeamsResponse data, response status code and response headers
    def list_teams_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: TeamApi.list_teams ..."
      end
      # resource path
      local_var_path = "/v2/teams"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['GenieKey']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ListTeamsResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TeamApi#list_teams\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update Team (Partial)
    # Update team with given id
    # @param identifier Identifier of the team
    # @param [Hash] opts the optional parameters
    # @option opts [UpdateTeamPayload] :body Request payload of update team action
    # @return [SuccessResponse]
    def update_team(identifier, opts = {})
      data, _status_code, _headers = update_team_with_http_info(identifier, opts)
      return data
    end

    # Update Team (Partial)
    # Update team with given id
    # @param identifier Identifier of the team
    # @param [Hash] opts the optional parameters
    # @option opts [UpdateTeamPayload] :body Request payload of update team action
    # @return [Array<(SuccessResponse, Fixnum, Hash)>] SuccessResponse data, response status code and response headers
    def update_team_with_http_info(identifier, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: TeamApi.update_team ..."
      end
      # verify the required parameter 'identifier' is set
      if @api_client.config.client_side_validation && identifier.nil?
        fail ArgumentError, "Missing the required parameter 'identifier' when calling TeamApi.update_team"
      end
      # resource path
      local_var_path = "/v2/teams/{identifier}".sub('{' + 'identifier' + '}', identifier.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = ['GenieKey']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SuccessResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TeamApi#update_team\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
