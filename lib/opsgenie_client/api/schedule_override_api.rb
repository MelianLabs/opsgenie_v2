=begin
#OpsGenie REST API

#OpsGenie OpenAPI Specification

OpenAPI spec version: 2.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.1

=end

require "uri"

module OpsgenieClient
  class ScheduleOverrideApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Create Schedule Override
    # Creates a schedule override for the specified user and schedule
    # @param identifier Identifier of schedule which could be id or name
    # @param body Request payload of created schedule override
    # @param [Hash] opts the optional parameters
    # @option opts [String] :schedule_identifier_type Type of the identifier that is provided as an in-line parameter. Possible values are &#39;id&#39; or &#39;name&#39; (default to id)
    # @return [CreateScheduleOverrideResponse]
    def create_schedule_override(identifier, body, opts = {})
      data, _status_code, _headers = create_schedule_override_with_http_info(identifier, body, opts)
      return data
    end

    # Create Schedule Override
    # Creates a schedule override for the specified user and schedule
    # @param identifier Identifier of schedule which could be id or name
    # @param body Request payload of created schedule override
    # @param [Hash] opts the optional parameters
    # @option opts [String] :schedule_identifier_type Type of the identifier that is provided as an in-line parameter. Possible values are &#39;id&#39; or &#39;name&#39;
    # @return [Array<(CreateScheduleOverrideResponse, Fixnum, Hash)>] CreateScheduleOverrideResponse data, response status code and response headers
    def create_schedule_override_with_http_info(identifier, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ScheduleOverrideApi.create_schedule_override ..."
      end
      # verify the required parameter 'identifier' is set
      if @api_client.config.client_side_validation && identifier.nil?
        fail ArgumentError, "Missing the required parameter 'identifier' when calling ScheduleOverrideApi.create_schedule_override"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling ScheduleOverrideApi.create_schedule_override"
      end
      if @api_client.config.client_side_validation && opts[:'schedule_identifier_type'] && !['id', 'name'].include?(opts[:'schedule_identifier_type'])
        fail ArgumentError, 'invalid value for "schedule_identifier_type", must be one of id, name'
      end
      # resource path
      local_var_path = "/v2/schedules/{identifier}/overrides".sub('{' + 'identifier' + '}', identifier.to_s)

      # query parameters
      query_params = {}
      query_params[:'scheduleIdentifierType'] = opts[:'schedule_identifier_type'] if !opts[:'schedule_identifier_type'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = ['GenieKey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CreateScheduleOverrideResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ScheduleOverrideApi#create_schedule_override\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete Schedule Override
    # Delete schedule override with given alias
    # @param identifier Identifier of schedule which could be id or name
    # @param _alias Alias of the schedule override
    # @param [Hash] opts the optional parameters
    # @option opts [String] :schedule_identifier_type Type of the identifier that is provided as an in-line parameter. Possible values are &#39;id&#39; or &#39;name&#39; (default to id)
    # @return [SuccessResponse]
    def delete_schedule_override(identifier, _alias, opts = {})
      data, _status_code, _headers = delete_schedule_override_with_http_info(identifier, _alias, opts)
      return data
    end

    # Delete Schedule Override
    # Delete schedule override with given alias
    # @param identifier Identifier of schedule which could be id or name
    # @param _alias Alias of the schedule override
    # @param [Hash] opts the optional parameters
    # @option opts [String] :schedule_identifier_type Type of the identifier that is provided as an in-line parameter. Possible values are &#39;id&#39; or &#39;name&#39;
    # @return [Array<(SuccessResponse, Fixnum, Hash)>] SuccessResponse data, response status code and response headers
    def delete_schedule_override_with_http_info(identifier, _alias, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ScheduleOverrideApi.delete_schedule_override ..."
      end
      # verify the required parameter 'identifier' is set
      if @api_client.config.client_side_validation && identifier.nil?
        fail ArgumentError, "Missing the required parameter 'identifier' when calling ScheduleOverrideApi.delete_schedule_override"
      end
      # verify the required parameter '_alias' is set
      if @api_client.config.client_side_validation && _alias.nil?
        fail ArgumentError, "Missing the required parameter '_alias' when calling ScheduleOverrideApi.delete_schedule_override"
      end
      if @api_client.config.client_side_validation && opts[:'schedule_identifier_type'] && !['id', 'name'].include?(opts[:'schedule_identifier_type'])
        fail ArgumentError, 'invalid value for "schedule_identifier_type", must be one of id, name'
      end
      # resource path
      local_var_path = "/v2/schedules/{identifier}/overrides/{alias}".sub('{' + 'identifier' + '}', identifier.to_s).sub('{' + 'alias' + '}', _alias.to_s)

      # query parameters
      query_params = {}
      query_params[:'scheduleIdentifierType'] = opts[:'schedule_identifier_type'] if !opts[:'schedule_identifier_type'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['GenieKey']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SuccessResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ScheduleOverrideApi#delete_schedule_override\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Schedule Override
    # Gets schedule override details with given alias
    # @param identifier Identifier of schedule which could be id or name
    # @param _alias Alias of the schedule override
    # @param [Hash] opts the optional parameters
    # @option opts [String] :schedule_identifier_type Type of the identifier that is provided as an in-line parameter. Possible values are &#39;id&#39; or &#39;name&#39; (default to id)
    # @return [GetScheduleOverrideResponse]
    def get_schedule_override(identifier, _alias, opts = {})
      data, _status_code, _headers = get_schedule_override_with_http_info(identifier, _alias, opts)
      return data
    end

    # Get Schedule Override
    # Gets schedule override details with given alias
    # @param identifier Identifier of schedule which could be id or name
    # @param _alias Alias of the schedule override
    # @param [Hash] opts the optional parameters
    # @option opts [String] :schedule_identifier_type Type of the identifier that is provided as an in-line parameter. Possible values are &#39;id&#39; or &#39;name&#39;
    # @return [Array<(GetScheduleOverrideResponse, Fixnum, Hash)>] GetScheduleOverrideResponse data, response status code and response headers
    def get_schedule_override_with_http_info(identifier, _alias, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ScheduleOverrideApi.get_schedule_override ..."
      end
      # verify the required parameter 'identifier' is set
      if @api_client.config.client_side_validation && identifier.nil?
        fail ArgumentError, "Missing the required parameter 'identifier' when calling ScheduleOverrideApi.get_schedule_override"
      end
      # verify the required parameter '_alias' is set
      if @api_client.config.client_side_validation && _alias.nil?
        fail ArgumentError, "Missing the required parameter '_alias' when calling ScheduleOverrideApi.get_schedule_override"
      end
      if @api_client.config.client_side_validation && opts[:'schedule_identifier_type'] && !['id', 'name'].include?(opts[:'schedule_identifier_type'])
        fail ArgumentError, 'invalid value for "schedule_identifier_type", must be one of id, name'
      end
      # resource path
      local_var_path = "/v2/schedules/{identifier}/overrides/{alias}".sub('{' + 'identifier' + '}', identifier.to_s).sub('{' + 'alias' + '}', _alias.to_s)

      # query parameters
      query_params = {}
      query_params[:'scheduleIdentifierType'] = opts[:'schedule_identifier_type'] if !opts[:'schedule_identifier_type'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['GenieKey']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GetScheduleOverrideResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ScheduleOverrideApi#get_schedule_override\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Schedule Overrides
    # Returns list of schedule overrides
    # @param identifier Identifier of schedule which could be id or name
    # @param [Hash] opts the optional parameters
    # @option opts [String] :schedule_identifier_type Type of the identifier that is provided as an in-line parameter. Possible values are &#39;id&#39; or &#39;name&#39; (default to id)
    # @return [ListScheduleOverrideResponse]
    def list_schedule_override(identifier, opts = {})
      data, _status_code, _headers = list_schedule_override_with_http_info(identifier, opts)
      return data
    end

    # List Schedule Overrides
    # Returns list of schedule overrides
    # @param identifier Identifier of schedule which could be id or name
    # @param [Hash] opts the optional parameters
    # @option opts [String] :schedule_identifier_type Type of the identifier that is provided as an in-line parameter. Possible values are &#39;id&#39; or &#39;name&#39;
    # @return [Array<(ListScheduleOverrideResponse, Fixnum, Hash)>] ListScheduleOverrideResponse data, response status code and response headers
    def list_schedule_override_with_http_info(identifier, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ScheduleOverrideApi.list_schedule_override ..."
      end
      # verify the required parameter 'identifier' is set
      if @api_client.config.client_side_validation && identifier.nil?
        fail ArgumentError, "Missing the required parameter 'identifier' when calling ScheduleOverrideApi.list_schedule_override"
      end
      if @api_client.config.client_side_validation && opts[:'schedule_identifier_type'] && !['id', 'name'].include?(opts[:'schedule_identifier_type'])
        fail ArgumentError, 'invalid value for "schedule_identifier_type", must be one of id, name'
      end
      # resource path
      local_var_path = "/v2/schedules/{identifier}/overrides".sub('{' + 'identifier' + '}', identifier.to_s)

      # query parameters
      query_params = {}
      query_params[:'scheduleIdentifierType'] = opts[:'schedule_identifier_type'] if !opts[:'schedule_identifier_type'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['GenieKey']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ListScheduleOverrideResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ScheduleOverrideApi#list_schedule_override\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update Schedule Override
    # Update schedule override with given alias
    # @param identifier Identifier of schedule which could be id or name
    # @param _alias Alias of the schedule override
    # @param body Request payload of update schedule override
    # @param [Hash] opts the optional parameters
    # @option opts [String] :schedule_identifier_type Type of the identifier that is provided as an in-line parameter. Possible values are &#39;id&#39; or &#39;name&#39; (default to id)
    # @return [UpdateScheduleOverrideResponse]
    def update_schedule_override(identifier, _alias, body, opts = {})
      data, _status_code, _headers = update_schedule_override_with_http_info(identifier, _alias, body, opts)
      return data
    end

    # Update Schedule Override
    # Update schedule override with given alias
    # @param identifier Identifier of schedule which could be id or name
    # @param _alias Alias of the schedule override
    # @param body Request payload of update schedule override
    # @param [Hash] opts the optional parameters
    # @option opts [String] :schedule_identifier_type Type of the identifier that is provided as an in-line parameter. Possible values are &#39;id&#39; or &#39;name&#39;
    # @return [Array<(UpdateScheduleOverrideResponse, Fixnum, Hash)>] UpdateScheduleOverrideResponse data, response status code and response headers
    def update_schedule_override_with_http_info(identifier, _alias, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ScheduleOverrideApi.update_schedule_override ..."
      end
      # verify the required parameter 'identifier' is set
      if @api_client.config.client_side_validation && identifier.nil?
        fail ArgumentError, "Missing the required parameter 'identifier' when calling ScheduleOverrideApi.update_schedule_override"
      end
      # verify the required parameter '_alias' is set
      if @api_client.config.client_side_validation && _alias.nil?
        fail ArgumentError, "Missing the required parameter '_alias' when calling ScheduleOverrideApi.update_schedule_override"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling ScheduleOverrideApi.update_schedule_override"
      end
      if @api_client.config.client_side_validation && opts[:'schedule_identifier_type'] && !['id', 'name'].include?(opts[:'schedule_identifier_type'])
        fail ArgumentError, 'invalid value for "schedule_identifier_type", must be one of id, name'
      end
      # resource path
      local_var_path = "/v2/schedules/{identifier}/overrides/{alias}".sub('{' + 'identifier' + '}', identifier.to_s).sub('{' + 'alias' + '}', _alias.to_s)

      # query parameters
      query_params = {}
      query_params[:'scheduleIdentifierType'] = opts[:'schedule_identifier_type'] if !opts[:'schedule_identifier_type'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = ['GenieKey']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'UpdateScheduleOverrideResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ScheduleOverrideApi#update_schedule_override\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
