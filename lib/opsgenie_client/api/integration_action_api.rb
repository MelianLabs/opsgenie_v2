=begin
#OpsGenie REST API

#OpsGenie OpenAPI Specification

OpenAPI spec version: 2.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.1

=end

require "uri"

module OpsgenieClient
  class IntegrationActionApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Create Integration Action
    # Creates integration actions of given integration id
    # @param id Integration Id
    # @param body Request payload to create integration action
    # @param [Hash] opts the optional parameters
    # @return [CreateIntegrationActionsResponse]
    def create_integration_action(id, body, opts = {})
      data, _status_code, _headers = create_integration_action_with_http_info(id, body, opts)
      return data
    end

    # Create Integration Action
    # Creates integration actions of given integration id
    # @param id Integration Id
    # @param body Request payload to create integration action
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreateIntegrationActionsResponse, Fixnum, Hash)>] CreateIntegrationActionsResponse data, response status code and response headers
    def create_integration_action_with_http_info(id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: IntegrationActionApi.create_integration_action ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling IntegrationActionApi.create_integration_action"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling IntegrationActionApi.create_integration_action"
      end
      # resource path
      local_var_path = "/v2/integrations/{id}/actions".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = ['GenieKey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CreateIntegrationActionsResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IntegrationActionApi#create_integration_action\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Integration Actions
    # List integration actions of given integration id
    # @param id Integration Id
    # @param [Hash] opts the optional parameters
    # @return [ListIntegrationActionsResponse]
    def list_integration_actions(id, opts = {})
      data, _status_code, _headers = list_integration_actions_with_http_info(id, opts)
      return data
    end

    # List Integration Actions
    # List integration actions of given integration id
    # @param id Integration Id
    # @param [Hash] opts the optional parameters
    # @return [Array<(ListIntegrationActionsResponse, Fixnum, Hash)>] ListIntegrationActionsResponse data, response status code and response headers
    def list_integration_actions_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: IntegrationActionApi.list_integration_actions ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling IntegrationActionApi.list_integration_actions"
      end
      # resource path
      local_var_path = "/v2/integrations/{id}/actions".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['GenieKey']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ListIntegrationActionsResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IntegrationActionApi#list_integration_actions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update Integration Actions
    # Updates integration actions of given integration id
    # @param id Integration Id
    # @param body Request payload to update integration actions
    # @param [Hash] opts the optional parameters
    # @return [UpdateIntegrationActionsResponse]
    def update_integration_actions(id, body, opts = {})
      data, _status_code, _headers = update_integration_actions_with_http_info(id, body, opts)
      return data
    end

    # Update Integration Actions
    # Updates integration actions of given integration id
    # @param id Integration Id
    # @param body Request payload to update integration actions
    # @param [Hash] opts the optional parameters
    # @return [Array<(UpdateIntegrationActionsResponse, Fixnum, Hash)>] UpdateIntegrationActionsResponse data, response status code and response headers
    def update_integration_actions_with_http_info(id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: IntegrationActionApi.update_integration_actions ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling IntegrationActionApi.update_integration_actions"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling IntegrationActionApi.update_integration_actions"
      end
      # resource path
      local_var_path = "/v2/integrations/{id}/actions".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = ['GenieKey']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'UpdateIntegrationActionsResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IntegrationActionApi#update_integration_actions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
