=begin
#OpsGenie REST API

#OpsGenie OpenAPI Specification

OpenAPI spec version: 2.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.1

=end

require "uri"

module OpsgenieClient
  class ForwardingRuleApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Create Forwarding Rule
    # Creates a new forwarding rule
    # @param body Request payload to created forwarding rule
    # @param [Hash] opts the optional parameters
    # @return [CreateForwardingRuleResponse]
    def create_forwarding_rule(body, opts = {})
      data, _status_code, _headers = create_forwarding_rule_with_http_info(body, opts)
      return data
    end

    # Create Forwarding Rule
    # Creates a new forwarding rule
    # @param body Request payload to created forwarding rule
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreateForwardingRuleResponse, Fixnum, Hash)>] CreateForwardingRuleResponse data, response status code and response headers
    def create_forwarding_rule_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ForwardingRuleApi.create_forwarding_rule ..."
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling ForwardingRuleApi.create_forwarding_rule"
      end
      # resource path
      local_var_path = "/v2/forwarding-rules"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = ['GenieKey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CreateForwardingRuleResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ForwardingRuleApi#create_forwarding_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete Forwarding Rule
    # Deletes forwarding rule with given identifier
    # @param identifier Identifier of the forwarding rule which could be forwarding rule &#39;id&#39; or &#39;alias&#39;
    # @param [Hash] opts the optional parameters
    # @option opts [String] :identifier_type Type of the identifier that is provided as an in-line parameter. Possible values are &#39;id&#39; or &#39;alias&#39; (default to id)
    # @return [SuccessResponse]
    def delete_forwarding_rule(identifier, opts = {})
      data, _status_code, _headers = delete_forwarding_rule_with_http_info(identifier, opts)
      return data
    end

    # Delete Forwarding Rule
    # Deletes forwarding rule with given identifier
    # @param identifier Identifier of the forwarding rule which could be forwarding rule &#39;id&#39; or &#39;alias&#39;
    # @param [Hash] opts the optional parameters
    # @option opts [String] :identifier_type Type of the identifier that is provided as an in-line parameter. Possible values are &#39;id&#39; or &#39;alias&#39;
    # @return [Array<(SuccessResponse, Fixnum, Hash)>] SuccessResponse data, response status code and response headers
    def delete_forwarding_rule_with_http_info(identifier, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ForwardingRuleApi.delete_forwarding_rule ..."
      end
      # verify the required parameter 'identifier' is set
      if @api_client.config.client_side_validation && identifier.nil?
        fail ArgumentError, "Missing the required parameter 'identifier' when calling ForwardingRuleApi.delete_forwarding_rule"
      end
      if @api_client.config.client_side_validation && opts[:'identifier_type'] && !['id', 'alias'].include?(opts[:'identifier_type'])
        fail ArgumentError, 'invalid value for "identifier_type", must be one of id, alias'
      end
      # resource path
      local_var_path = "/v2/forwarding-rules/{identifier}".sub('{' + 'identifier' + '}', identifier.to_s)

      # query parameters
      query_params = {}
      query_params[:'identifierType'] = opts[:'identifier_type'] if !opts[:'identifier_type'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['GenieKey']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SuccessResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ForwardingRuleApi#delete_forwarding_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Forwarding Rule
    # Returns forwarding rule with given id or alias
    # @param identifier Identifier of the forwarding rule which could be forwarding rule &#39;id&#39; or &#39;alias&#39;
    # @param [Hash] opts the optional parameters
    # @option opts [String] :identifier_type Type of the identifier that is provided as an in-line parameter. Possible values are &#39;id&#39; or &#39;alias&#39; (default to id)
    # @return [GetForwardingRuleResponse]
    def get_forwarding_rule(identifier, opts = {})
      data, _status_code, _headers = get_forwarding_rule_with_http_info(identifier, opts)
      return data
    end

    # Get Forwarding Rule
    # Returns forwarding rule with given id or alias
    # @param identifier Identifier of the forwarding rule which could be forwarding rule &#39;id&#39; or &#39;alias&#39;
    # @param [Hash] opts the optional parameters
    # @option opts [String] :identifier_type Type of the identifier that is provided as an in-line parameter. Possible values are &#39;id&#39; or &#39;alias&#39;
    # @return [Array<(GetForwardingRuleResponse, Fixnum, Hash)>] GetForwardingRuleResponse data, response status code and response headers
    def get_forwarding_rule_with_http_info(identifier, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ForwardingRuleApi.get_forwarding_rule ..."
      end
      # verify the required parameter 'identifier' is set
      if @api_client.config.client_side_validation && identifier.nil?
        fail ArgumentError, "Missing the required parameter 'identifier' when calling ForwardingRuleApi.get_forwarding_rule"
      end
      if @api_client.config.client_side_validation && opts[:'identifier_type'] && !['id', 'alias'].include?(opts[:'identifier_type'])
        fail ArgumentError, 'invalid value for "identifier_type", must be one of id, alias'
      end
      # resource path
      local_var_path = "/v2/forwarding-rules/{identifier}".sub('{' + 'identifier' + '}', identifier.to_s)

      # query parameters
      query_params = {}
      query_params[:'identifierType'] = opts[:'identifier_type'] if !opts[:'identifier_type'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['GenieKey']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GetForwardingRuleResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ForwardingRuleApi#get_forwarding_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Forwarding Rules
    # Returns list of forwarding rules
    # @param [Hash] opts the optional parameters
    # @return [ListForwardingRulesResponse]
    def list_forwarding_rules(opts = {})
      data, _status_code, _headers = list_forwarding_rules_with_http_info(opts)
      return data
    end

    # List Forwarding Rules
    # Returns list of forwarding rules
    # @param [Hash] opts the optional parameters
    # @return [Array<(ListForwardingRulesResponse, Fixnum, Hash)>] ListForwardingRulesResponse data, response status code and response headers
    def list_forwarding_rules_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ForwardingRuleApi.list_forwarding_rules ..."
      end
      # resource path
      local_var_path = "/v2/forwarding-rules"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['GenieKey']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ListForwardingRulesResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ForwardingRuleApi#list_forwarding_rules\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update Forwarding Rule
    # Update forwarding rule with given rule id or alias
    # @param identifier Identifier of the forwarding rule which could be forwarding rule &#39;id&#39; or &#39;alias&#39;
    # @param body Request payload of update forwarding rule action
    # @param [Hash] opts the optional parameters
    # @option opts [String] :identifier_type Type of the identifier that is provided as an in-line parameter. Possible values are &#39;id&#39; or &#39;alias&#39; (default to id)
    # @return [SuccessResponse]
    def update_forwarding_rule(identifier, body, opts = {})
      data, _status_code, _headers = update_forwarding_rule_with_http_info(identifier, body, opts)
      return data
    end

    # Update Forwarding Rule
    # Update forwarding rule with given rule id or alias
    # @param identifier Identifier of the forwarding rule which could be forwarding rule &#39;id&#39; or &#39;alias&#39;
    # @param body Request payload of update forwarding rule action
    # @param [Hash] opts the optional parameters
    # @option opts [String] :identifier_type Type of the identifier that is provided as an in-line parameter. Possible values are &#39;id&#39; or &#39;alias&#39;
    # @return [Array<(SuccessResponse, Fixnum, Hash)>] SuccessResponse data, response status code and response headers
    def update_forwarding_rule_with_http_info(identifier, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ForwardingRuleApi.update_forwarding_rule ..."
      end
      # verify the required parameter 'identifier' is set
      if @api_client.config.client_side_validation && identifier.nil?
        fail ArgumentError, "Missing the required parameter 'identifier' when calling ForwardingRuleApi.update_forwarding_rule"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling ForwardingRuleApi.update_forwarding_rule"
      end
      if @api_client.config.client_side_validation && opts[:'identifier_type'] && !['id', 'alias'].include?(opts[:'identifier_type'])
        fail ArgumentError, 'invalid value for "identifier_type", must be one of id, alias'
      end
      # resource path
      local_var_path = "/v2/forwarding-rules/{identifier}".sub('{' + 'identifier' + '}', identifier.to_s)

      # query parameters
      query_params = {}
      query_params[:'identifierType'] = opts[:'identifier_type'] if !opts[:'identifier_type'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = ['GenieKey']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SuccessResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ForwardingRuleApi#update_forwarding_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
