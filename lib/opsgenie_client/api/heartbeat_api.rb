=begin
#OpsGenie REST API

#OpsGenie OpenAPI Specification

OpenAPI spec version: 2.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.1

=end

require "uri"

module OpsgenieClient
  class HeartbeatApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Create Heartbeat
    # Create a new heartbeat
    # @param body Request payload of created heartbeat
    # @param [Hash] opts the optional parameters
    # @return [CreateHeartbeatResponse]
    def create_heartbeat(body, opts = {})
      data, _status_code, _headers = create_heartbeat_with_http_info(body, opts)
      return data
    end

    # Create Heartbeat
    # Create a new heartbeat
    # @param body Request payload of created heartbeat
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreateHeartbeatResponse, Fixnum, Hash)>] CreateHeartbeatResponse data, response status code and response headers
    def create_heartbeat_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: HeartbeatApi.create_heartbeat ..."
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling HeartbeatApi.create_heartbeat"
      end
      # resource path
      local_var_path = "/v2/heartbeats"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = ['GenieKey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CreateHeartbeatResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: HeartbeatApi#create_heartbeat\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete Heartbeat
    # Delete heartbeat with given name
    # @param name Name of the heartbeat
    # @param [Hash] opts the optional parameters
    # @return [SuccessResponse]
    def delete_heartbeat(name, opts = {})
      data, _status_code, _headers = delete_heartbeat_with_http_info(name, opts)
      return data
    end

    # Delete Heartbeat
    # Delete heartbeat with given name
    # @param name Name of the heartbeat
    # @param [Hash] opts the optional parameters
    # @return [Array<(SuccessResponse, Fixnum, Hash)>] SuccessResponse data, response status code and response headers
    def delete_heartbeat_with_http_info(name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: HeartbeatApi.delete_heartbeat ..."
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling HeartbeatApi.delete_heartbeat"
      end
      # resource path
      local_var_path = "/v2/heartbeats/{name}".sub('{' + 'name' + '}', name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['GenieKey']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SuccessResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: HeartbeatApi#delete_heartbeat\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Disable Heartbeat
    # Disable heartbeat request with given name
    # @param name Name of the heartbeat
    # @param [Hash] opts the optional parameters
    # @return [DisableHeartbeatResponse]
    def disable_heartbeat(name, opts = {})
      data, _status_code, _headers = disable_heartbeat_with_http_info(name, opts)
      return data
    end

    # Disable Heartbeat
    # Disable heartbeat request with given name
    # @param name Name of the heartbeat
    # @param [Hash] opts the optional parameters
    # @return [Array<(DisableHeartbeatResponse, Fixnum, Hash)>] DisableHeartbeatResponse data, response status code and response headers
    def disable_heartbeat_with_http_info(name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: HeartbeatApi.disable_heartbeat ..."
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling HeartbeatApi.disable_heartbeat"
      end
      # resource path
      local_var_path = "/v2/heartbeats/{name}/disable".sub('{' + 'name' + '}', name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['GenieKey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DisableHeartbeatResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: HeartbeatApi#disable_heartbeat\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Enable Heartbeat
    # Enable heartbeat request with given name
    # @param name Name of the heartbeat
    # @param [Hash] opts the optional parameters
    # @return [EnableHeartbeatResponse]
    def enable_heartbeat(name, opts = {})
      data, _status_code, _headers = enable_heartbeat_with_http_info(name, opts)
      return data
    end

    # Enable Heartbeat
    # Enable heartbeat request with given name
    # @param name Name of the heartbeat
    # @param [Hash] opts the optional parameters
    # @return [Array<(EnableHeartbeatResponse, Fixnum, Hash)>] EnableHeartbeatResponse data, response status code and response headers
    def enable_heartbeat_with_http_info(name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: HeartbeatApi.enable_heartbeat ..."
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling HeartbeatApi.enable_heartbeat"
      end
      # resource path
      local_var_path = "/v2/heartbeats/{name}/enable".sub('{' + 'name' + '}', name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['GenieKey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EnableHeartbeatResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: HeartbeatApi#enable_heartbeat\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Heartbeat
    # Returns heartbeat with given name
    # @param name Name of the heartbeat
    # @param [Hash] opts the optional parameters
    # @return [GetHeartbeatResponse]
    def get_heartbeat(name, opts = {})
      data, _status_code, _headers = get_heartbeat_with_http_info(name, opts)
      return data
    end

    # Get Heartbeat
    # Returns heartbeat with given name
    # @param name Name of the heartbeat
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetHeartbeatResponse, Fixnum, Hash)>] GetHeartbeatResponse data, response status code and response headers
    def get_heartbeat_with_http_info(name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: HeartbeatApi.get_heartbeat ..."
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling HeartbeatApi.get_heartbeat"
      end
      # resource path
      local_var_path = "/v2/heartbeats/{name}".sub('{' + 'name' + '}', name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['GenieKey']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GetHeartbeatResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: HeartbeatApi#get_heartbeat\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Ping Heartbeat
    # Ping Heartbeat for given heartbeat name
    # @param name Name of the heartbeat
    # @param [Hash] opts the optional parameters
    # @return [SuccessResponse]
    def ping(name, opts = {})
      data, _status_code, _headers = ping_with_http_info(name, opts)
      return data
    end

    # Ping Heartbeat
    # Ping Heartbeat for given heartbeat name
    # @param name Name of the heartbeat
    # @param [Hash] opts the optional parameters
    # @return [Array<(SuccessResponse, Fixnum, Hash)>] SuccessResponse data, response status code and response headers
    def ping_with_http_info(name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: HeartbeatApi.ping ..."
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling HeartbeatApi.ping"
      end
      # resource path
      local_var_path = "/v2/heartbeats/{name}/ping".sub('{' + 'name' + '}', name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['GenieKey']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SuccessResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: HeartbeatApi#ping\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update Heartbeat (Partial)
    # Update Heartbeatwith given name
    # @param name Name of the heartbeat
    # @param [Hash] opts the optional parameters
    # @option opts [UpdateHeartbeatPayload] :body Request payload of update heartbeat action
    # @return [UpdateHeartbeatResponse]
    def update_heartbeat(name, opts = {})
      data, _status_code, _headers = update_heartbeat_with_http_info(name, opts)
      return data
    end

    # Update Heartbeat (Partial)
    # Update Heartbeatwith given name
    # @param name Name of the heartbeat
    # @param [Hash] opts the optional parameters
    # @option opts [UpdateHeartbeatPayload] :body Request payload of update heartbeat action
    # @return [Array<(UpdateHeartbeatResponse, Fixnum, Hash)>] UpdateHeartbeatResponse data, response status code and response headers
    def update_heartbeat_with_http_info(name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: HeartbeatApi.update_heartbeat ..."
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling HeartbeatApi.update_heartbeat"
      end
      # resource path
      local_var_path = "/v2/heartbeats/{name}".sub('{' + 'name' + '}', name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = ['GenieKey']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'UpdateHeartbeatResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: HeartbeatApi#update_heartbeat\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
