=begin
#OpsGenie REST API

#OpsGenie OpenAPI Specification

OpenAPI spec version: 2.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.1

=end

require "uri"

module OpsgenieClient
  class WhoIsOnCallApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Export On-Call User
    # Exports personal on-call timeline of 3 months to a .ics file
    # @param identifier Identifier of the user. Should be either &#39;id&#39; or &#39;username&#39; of the user
    # @param [Hash] opts the optional parameters
    # @return [String]
    def export_on_call_user(identifier, opts = {})
      data, _status_code, _headers = export_on_call_user_with_http_info(identifier, opts)
      return data
    end

    # Export On-Call User
    # Exports personal on-call timeline of 3 months to a .ics file
    # @param identifier Identifier of the user. Should be either &#39;id&#39; or &#39;username&#39; of the user
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def export_on_call_user_with_http_info(identifier, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: WhoIsOnCallApi.export_on_call_user ..."
      end
      # verify the required parameter 'identifier' is set
      if @api_client.config.client_side_validation && identifier.nil?
        fail ArgumentError, "Missing the required parameter 'identifier' when calling WhoIsOnCallApi.export_on_call_user"
      end
      # resource path
      local_var_path = "/v2/schedules/on-calls/{identifier}.ics".sub('{' + 'identifier' + '}', identifier.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/calendar'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['GenieKey']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WhoIsOnCallApi#export_on_call_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Next On Calls
    # Gets next on-call participants of a specific schedule
    # @param identifier Identifier of schedule which could be id or name
    # @param [Hash] opts the optional parameters
    # @option opts [String] :schedule_identifier_type Type of the identifier that is provided as an in-line parameter. Possible values are &#39;id&#39; or &#39;name&#39; (default to id)
    # @option opts [BOOLEAN] :flat Retrieves user names of all on call participants if enabled
    # @option opts [DateTime] :date Starting date of the timeline
    # @return [GetNextOnCallResponse]
    def get_next_on_calls(identifier, opts = {})
      data, _status_code, _headers = get_next_on_calls_with_http_info(identifier, opts)
      return data
    end

    # Get Next On Calls
    # Gets next on-call participants of a specific schedule
    # @param identifier Identifier of schedule which could be id or name
    # @param [Hash] opts the optional parameters
    # @option opts [String] :schedule_identifier_type Type of the identifier that is provided as an in-line parameter. Possible values are &#39;id&#39; or &#39;name&#39;
    # @option opts [BOOLEAN] :flat Retrieves user names of all on call participants if enabled
    # @option opts [DateTime] :date Starting date of the timeline
    # @return [Array<(GetNextOnCallResponse, Fixnum, Hash)>] GetNextOnCallResponse data, response status code and response headers
    def get_next_on_calls_with_http_info(identifier, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: WhoIsOnCallApi.get_next_on_calls ..."
      end
      # verify the required parameter 'identifier' is set
      if @api_client.config.client_side_validation && identifier.nil?
        fail ArgumentError, "Missing the required parameter 'identifier' when calling WhoIsOnCallApi.get_next_on_calls"
      end
      if @api_client.config.client_side_validation && opts[:'schedule_identifier_type'] && !['id', 'name'].include?(opts[:'schedule_identifier_type'])
        fail ArgumentError, 'invalid value for "schedule_identifier_type", must be one of id, name'
      end
      # resource path
      local_var_path = "/v2/schedules/{identifier}/next-on-calls".sub('{' + 'identifier' + '}', identifier.to_s)

      # query parameters
      query_params = {}
      query_params[:'scheduleIdentifierType'] = opts[:'schedule_identifier_type'] if !opts[:'schedule_identifier_type'].nil?
      query_params[:'flat'] = opts[:'flat'] if !opts[:'flat'].nil?
      query_params[:'date'] = opts[:'date'] if !opts[:'date'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['GenieKey']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GetNextOnCallResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WhoIsOnCallApi#get_next_on_calls\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get On Calls
    # Gets current on-call participants of a specific schedule
    # @param identifier Identifier of schedule which could be id or name
    # @param [Hash] opts the optional parameters
    # @option opts [String] :schedule_identifier_type Type of the identifier that is provided as an in-line parameter. Possible values are &#39;id&#39; or &#39;name&#39; (default to id)
    # @option opts [BOOLEAN] :flat Retrieves user names of all on call participants if enabled
    # @option opts [DateTime] :date Starting date of the timeline
    # @return [GetOnCallResponse]
    def get_on_calls(identifier, opts = {})
      data, _status_code, _headers = get_on_calls_with_http_info(identifier, opts)
      return data
    end

    # Get On Calls
    # Gets current on-call participants of a specific schedule
    # @param identifier Identifier of schedule which could be id or name
    # @param [Hash] opts the optional parameters
    # @option opts [String] :schedule_identifier_type Type of the identifier that is provided as an in-line parameter. Possible values are &#39;id&#39; or &#39;name&#39;
    # @option opts [BOOLEAN] :flat Retrieves user names of all on call participants if enabled
    # @option opts [DateTime] :date Starting date of the timeline
    # @return [Array<(GetOnCallResponse, Fixnum, Hash)>] GetOnCallResponse data, response status code and response headers
    def get_on_calls_with_http_info(identifier, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: WhoIsOnCallApi.get_on_calls ..."
      end
      # verify the required parameter 'identifier' is set
      if @api_client.config.client_side_validation && identifier.nil?
        fail ArgumentError, "Missing the required parameter 'identifier' when calling WhoIsOnCallApi.get_on_calls"
      end
      if @api_client.config.client_side_validation && opts[:'schedule_identifier_type'] && !['id', 'name'].include?(opts[:'schedule_identifier_type'])
        fail ArgumentError, 'invalid value for "schedule_identifier_type", must be one of id, name'
      end
      # resource path
      local_var_path = "/v2/schedules/{identifier}/on-calls".sub('{' + 'identifier' + '}', identifier.to_s)

      # query parameters
      query_params = {}
      query_params[:'scheduleIdentifierType'] = opts[:'schedule_identifier_type'] if !opts[:'schedule_identifier_type'].nil?
      query_params[:'flat'] = opts[:'flat'] if !opts[:'flat'].nil?
      query_params[:'date'] = opts[:'date'] if !opts[:'date'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['GenieKey']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GetOnCallResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WhoIsOnCallApi#get_on_calls\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List On Calls
    # Lists current on-call participants of all schedules
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :flat Retrieves user names of all on call participants if enabled
    # @option opts [DateTime] :date Starting date of the timeline
    # @return [ListOnCallsResponse]
    def list_on_calls(opts = {})
      data, _status_code, _headers = list_on_calls_with_http_info(opts)
      return data
    end

    # List On Calls
    # Lists current on-call participants of all schedules
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :flat Retrieves user names of all on call participants if enabled
    # @option opts [DateTime] :date Starting date of the timeline
    # @return [Array<(ListOnCallsResponse, Fixnum, Hash)>] ListOnCallsResponse data, response status code and response headers
    def list_on_calls_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: WhoIsOnCallApi.list_on_calls ..."
      end
      # resource path
      local_var_path = "/v2/schedules/on-calls"

      # query parameters
      query_params = {}
      query_params[:'flat'] = opts[:'flat'] if !opts[:'flat'].nil?
      query_params[:'date'] = opts[:'date'] if !opts[:'date'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['GenieKey']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ListOnCallsResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WhoIsOnCallApi#list_on_calls\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
