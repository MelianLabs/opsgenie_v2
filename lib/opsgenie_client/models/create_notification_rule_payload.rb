=begin
#OpsGenie REST API

#OpsGenie OpenAPI Specification

OpenAPI spec version: 2.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.1

=end

require 'date'

module OpsgenieClient

  class CreateNotificationRulePayload
    # Name of the notification rule
    attr_accessor :name

    attr_accessor :action_type

    attr_accessor :criteria

    # List of Time Periods that notification for schedule start/end will be sent
    attr_accessor :notification_time

    # Time interval that notification rule will work
    attr_accessor :time_restriction

    # List of schedules that notification rule will be applied when on call of that schedule starts/ends. This field is valid for Schedule Start/End rules
    attr_accessor :schedules

    # The order of the notification rule within the notification rules with the same action type
    attr_accessor :order

    # List of steps that will be added to notification rule
    attr_accessor :steps

    attr_accessor :repeat

    # Defines if notification rule will be enabled or not when it is created
    attr_accessor :enabled


    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'name' => :'name',
        :'action_type' => :'actionType',
        :'criteria' => :'criteria',
        :'notification_time' => :'notificationTime',
        :'time_restriction' => :'timeRestriction',
        :'schedules' => :'schedules',
        :'order' => :'order',
        :'steps' => :'steps',
        :'repeat' => :'repeat',
        :'enabled' => :'enabled'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'name' => :'String',
        :'action_type' => :'NotificationActionType',
        :'criteria' => :'Filter',
        :'notification_time' => :'Array<NotifyTime>',
        :'time_restriction' => :'TimeRestrictionInterval',
        :'schedules' => :'Array<ScheduleRecipient>',
        :'order' => :'Integer',
        :'steps' => :'Array<CreateNotificationRuleStepPayload>',
        :'repeat' => :'NotificationRepeat',
        :'enabled' => :'BOOLEAN'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}){|(k,v), h| h[k.to_sym] = v}

      if attributes.has_key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.has_key?(:'actionType')
        self.action_type = attributes[:'actionType']
      end

      if attributes.has_key?(:'criteria')
        self.criteria = attributes[:'criteria']
      end

      if attributes.has_key?(:'notificationTime')
        if (value = attributes[:'notificationTime']).is_a?(Array)
          self.notification_time = value
        end
      end

      if attributes.has_key?(:'timeRestriction')
        self.time_restriction = attributes[:'timeRestriction']
      end

      if attributes.has_key?(:'schedules')
        if (value = attributes[:'schedules']).is_a?(Array)
          self.schedules = value
        end
      end

      if attributes.has_key?(:'order')
        self.order = attributes[:'order']
      end

      if attributes.has_key?(:'steps')
        if (value = attributes[:'steps']).is_a?(Array)
          self.steps = value
        end
      end

      if attributes.has_key?(:'repeat')
        self.repeat = attributes[:'repeat']
      end

      if attributes.has_key?(:'enabled')
        self.enabled = attributes[:'enabled']
      end

    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @name.nil?
        invalid_properties.push("invalid value for 'name', name cannot be nil.")
      end

      if @action_type.nil?
        invalid_properties.push("invalid value for 'action_type', action_type cannot be nil.")
      end

      if !@order.nil? && @order < 0
        invalid_properties.push("invalid value for 'order', must be greater than or equal to 0.")
      end

      if @enabled.nil?
        invalid_properties.push("invalid value for 'enabled', enabled cannot be nil.")
      end

      return invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @name.nil?
      return false if @action_type.nil?
      return false if !@order.nil? && @order < 0
      return false if @enabled.nil?
      return true
    end

    # Custom attribute writer method with validation
    # @param [Object] order Value to be assigned
    def order=(order)

      if !order.nil? && order < 0
        fail ArgumentError, "invalid value for 'order', must be greater than or equal to 0."
      end

      @order = order
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          name == o.name &&
          action_type == o.action_type &&
          criteria == o.criteria &&
          notification_time == o.notification_time &&
          time_restriction == o.time_restriction &&
          schedules == o.schedules &&
          order == o.order &&
          steps == o.steps &&
          repeat == o.repeat &&
          enabled == o.enabled
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [name, action_type, criteria, notification_time, time_restriction, schedules, order, steps, repeat, enabled].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map{ |v| _deserialize($1, v) } )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = OpsgenieClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map{ |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
